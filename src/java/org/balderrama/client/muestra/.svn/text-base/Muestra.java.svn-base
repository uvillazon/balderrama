/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.balderrama.client.muestra;

import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONParser;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;
import com.google.gwt.user.client.Window;
import com.gwtext.client.data.DataProxy;
import com.gwtext.client.data.FieldDef;
import com.gwtext.client.data.JsonReader;
import com.gwtext.client.data.RecordDef;
import com.gwtext.client.data.ScriptTagProxy;
import com.gwtext.client.data.StringFieldDef;
import com.gwtext.client.widgets.Button;
import com.gwtext.client.widgets.Component;
import com.gwtext.client.widgets.MessageBox;
import com.gwtext.client.widgets.PagingToolbar;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.QuickTipsConfig;
import com.gwtext.client.widgets.ToolbarButton;
import com.gwtext.client.widgets.event.ButtonListenerAdapter;
import com.gwtext.client.widgets.event.PanelListenerAdapter;
import com.gwtext.client.widgets.grid.ColumnConfig;
import com.gwtext.client.widgets.grid.ColumnModel;
import com.gwtext.client.widgets.grid.EditorGridPanel;
import com.gwtext.client.widgets.grid.GridPanel;
import com.gwtext.client.widgets.grid.event.GridCellListenerAdapter;
import com.gwtext.client.core.EventObject;
import com.gwtext.client.core.Ext;
import com.gwtext.client.core.ExtElement;
import com.gwtext.client.data.Record;
import com.gwtext.client.data.Store;
import com.gwtext.client.util.Format;
import com.gwtext.client.widgets.grid.BaseColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxSelectionModel;
import com.gwtext.client.widgets.grid.RowNumberingColumnConfig;
import org.balderrama.client.util.Conector;
import com.gwtext.client.widgets.form.Field;
import com.gwtext.client.widgets.form.TextField;
import com.gwtext.client.widgets.form.Checkbox;
import com.gwtext.client.widgets.grid.CellMetadata;
import com.gwtext.client.widgets.grid.Renderer;
import com.gwtext.client.widgets.grid.event.GridRowListenerAdapter;
import org.balderrama.client.util.ReporteMediaCartaChorroWindow;
import org.balderrama.client.util.Utils;
import org.balderrama.client.marca.CodificarMaterialForm;
import com.gwtext.client.widgets.Toolbar;

/**
 *
 * @author buggy
 */
public class Muestra extends Panel {

    private GridPanel grid;
    private ColumnConfig idColumn;
    private ColumnConfig coleccionColumn;
    private ColumnConfig paresColumn;
    private ColumnConfig unidadesColumn;

    private ColumnConfig marcaColumn;
    private ColumnConfig responsableColumn;
    private ColumnConfig estadoColumn;
//    private ColumnConfig imagenColumn;
    private final int ANCHO = Utils.getScreenWidth() - 24;
    private final int ALTO = Utils.getScreenHeight() - 270;
    private ToolbarButton editarMuestra;
    private ToolbarButton eliminarMuestra;
    private ToolbarButton nuevoMuestra;
    private ToolbarButton reporteMuestra;
//    private ToolbarButton codlineaMuestra;
//    private ToolbarButton codcolorMarca;
//    private ToolbarButton codmaterialMarca;
//    private ToolbarButton configurarMarca;
//    private ToolbarButton cargarimagenMarca;
//    private ToolbarButton modeloMarca;
    private ToolbarButton reporteImagen;
//    private EditarMarcaForm formulario;
//    private ConfigurarMarcaForm formulario1;
    protected ExtElement ext_element;
    CheckboxSelectionModel cbSelectionModel;
    Store store;
    private String selecionado;
    private BaseColumnConfig[] columns;
    ColumnModel columnModel;
    public CodificarMaterialForm formularioM;
//    public CodificarColorForm formularioC;
//    public CodificarLineaForm formulario2;
//    public NuevoModeloForm formulario3;

//-------------------variables para mostrar variables emergentes-----------
    
    protected String buscarCodigo;
    private TextField tex_codigo;
    protected String buscarColeccion;
    private TextField tex_coleccion;

    private Toolbar too_busquedaCBWW;
//-------------------fin de variables emergentes---------------------------

    public Muestra() {
        this.setClosable(true);
        this.setId("TPfun4000");
        setIconCls("tab-icon");
        setAutoScroll(false);
        setTitle("Lista Muestras");
        onModuleLoad();
    }

    public void onModuleLoad() {

        DataProxy dataProxy = new ScriptTagProxy("php/Muestra.php?funcion=ListarMuestra");
        final RecordDef recordDef = new RecordDef(new FieldDef[]{
                    new StringFieldDef("idmuestra"),
                    new StringFieldDef("marca"),
                    new StringFieldDef("coleccion"),
                    new StringFieldDef("pares"),
                    new StringFieldDef("unidades"),
                    new StringFieldDef("responsable"),
                    new StringFieldDef("estado")
                    
                });
        JsonReader reader = new JsonReader(recordDef);
        reader.setRoot("resultado");
        reader.setTotalProperty("totalCount");

        store = new Store(dataProxy, reader, true);

        /* columnade idusuario  */
        idColumn = new ColumnConfig("Id Muestra", "idmuestra", (ANCHO / 6) - 50, true);
        idColumn.setId("expandible");
        /* columnade nombre  */
        marcaColumn = new ColumnConfig("Marca", "marca", (ANCHO / 6) - 50, true);
        marcaColumn.setId("expandible");
        coleccionColumn = new ColumnConfig("Coleccion", "coleccion", (ANCHO / 6) - 50, true);
        paresColumn = new ColumnConfig("Pares", "pares", (ANCHO / 6) - 50, true);
        unidadesColumn = new ColumnConfig("Unidades", "unidades", (ANCHO / 6) - 50, true);

        responsableColumn = new ColumnConfig("Responsable", "responsable", (ANCHO / 6) - 50, true);
        estadoColumn = new ColumnConfig("Estado", "estado", (ANCHO / 6) - 50, true);


        cbSelectionModel = new CheckboxSelectionModel();
        columns = new BaseColumnConfig[]{
                    new RowNumberingColumnConfig(),
                    new CheckboxColumnConfig(cbSelectionModel),
                    //column ID is company which is later used in setAutoExpandColumn
                   // idColumn,
                    coleccionColumn,
                    paresColumn,
                    unidadesColumn,
                    marcaColumn,
                    responsableColumn,
                    estadoColumn
//                    imagenColumn
                };

        columnModel = new ColumnModel(columns);

        grid = new EditorGridPanel();
        grid.setId("grid-lista-muestras");
        grid.setWidth(ANCHO);
        grid.setHeight(ALTO);
        grid.setTitle("Lista de Muestras");
        grid.setStore(store);
        grid.setColumnModel(columnModel);
        grid.setTrackMouseOver(true);
        grid.setAutoExpandColumn("expandible");
        grid.setLoadMask(true);
        grid.setSelectionModel(cbSelectionModel);
        grid.setFrame(true);
        grid.setStripeRows(true);
        grid.setIconCls("grid-icon");
        grid.addGridRowListener(new GridRowListenerAdapter() {

            @Override
            public void onRowDblClick(GridPanel grid, int rowIndex, EventObject e) {
                
                Record[] records = cbSelectionModel.getSelections();


                selecionado = records[0].getAsString("idmuestra");
                String enlTemp = "funcion=reportemuestraHTML&idmuestra=" + selecionado;
                verReporte(enlTemp);
//                    Window.alert(enlTemp);
            }
        });

//        grid.a


        nuevoMuestra = new ToolbarButton("Nuevo Registro");
        nuevoMuestra.setEnableToggle(true);
        QuickTipsConfig tipsConfig1 = new QuickTipsConfig();
        tipsConfig1.setText("Crear nueva Muestra");
        nuevoMuestra.setTooltip(tipsConfig1);

        editarMuestra = new ToolbarButton("Editar");
        editarMuestra.setEnableToggle(true);
        QuickTipsConfig tipsConfig = new QuickTipsConfig();
        tipsConfig.setText("Editar Muestra");
        editarMuestra.setTooltip(tipsConfig);

        eliminarMuestra = new ToolbarButton("Anular");
        eliminarMuestra.setEnableToggle(true);
        QuickTipsConfig tipsConfig2 = new QuickTipsConfig();
        tipsConfig2.setText("anular Muestra");
        eliminarMuestra.setTooltip(tipsConfig2);

        reporteMuestra = new ToolbarButton("Ver items Muestra");
        reporteMuestra.setEnableToggle(true);
        QuickTipsConfig tipsConfig3 = new QuickTipsConfig();
        tipsConfig3.setText("Reporte Muestra");
        reporteMuestra.setTooltip(tipsConfig3);



        PagingToolbar pagingToolbar = new PagingToolbar(store);
        pagingToolbar.setPageSize(100);
        pagingToolbar.setDisplayInfo(true);
        pagingToolbar.setDisplayMsg("Mostrando {0} - {1} de {2}");
        pagingToolbar.setEmptyMsg("No topics to display");
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(nuevoMuestra);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(editarMuestra);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(eliminarMuestra);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(reporteMuestra);
        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(codlineaMuestra);
//        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(codmaterialMarca);
//        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(codcolorMarca);
//        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(configurarMarca);
//        pagingToolbar.addSeparator();
////        pagingToolbar.addButton(cargarimagenMarca);
////        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(modeloMarca);
//        pagingToolbar.addSeparator();

//------------variables emergenes-------------
        too_busquedaCBWW = new Toolbar();
        tex_codigo = new TextField("Id color:", "idmarca");
        
        too_busquedaCBWW.addText("Marca:");
        tex_coleccion = new TextField("Coleccion:", "idcoleccion");

        too_busquedaCBWW.addText("Coleccion:");

        too_busquedaCBWW.addField(tex_codigo);
        too_busquedaCBWW.addField(tex_coleccion);

        grid.setTopToolbar(too_busquedaCBWW);
//-------------fin de variables emergentes-----

        //pagingToolbar.addButton(reporteImagen);
        grid.setBottomToolbar(pagingToolbar);

        add(grid);
        //panel.add(grid);
        aniadirListenersMarcas();

    //RootPanel.get().add(panel);
    }

    public GridPanel getGrid() {
        return grid;
    }

    public void setGrid(GridPanel grid) {
        this.grid = grid;
    }

    public void reload() {
        store.reload();
        grid.reconfigure(store, columnModel);
        grid.getView().refresh();
    }

    private void CargarDatosNuevaMarca() {
        String enlace = "php/Marca.php?funcion=BuscarProveedorCategoriaTalla";
        Utils.setErrorPrincipal("Cargando parametros de Nueva Marca", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                    Object[][] categorias = Utils.getArrayOfJSONObject(marcaO, "categoriaM", new String[]{"idcategoria", "nombre"});
                                    Object[][] proveedores = Utils.getArrayOfJSONObject(marcaO, "proveedorM", new String[]{"idproveedor", "nombre"});
                                    Object[][] tallas = Utils.getArrayOfJSONObject(marcaO, "tallaM", new String[]{"idtalla", "codigo", "numero"});
                                    Window.alert("se preciono el boton nuevo");
//                                    formulario = null;
//                                    formulario = new EditarMarcaForm(null, "", "", "", "", "","", categorias, proveedores, tallas, Marca.this);
//                                    formulario.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }

    
    private void cargarDatosEditarMarca(String idmarca) {
        String enlace = "php/Marca.php?funcion=BuscarProveedorCategoriaTallaPorMarca&idmarca=" + idmarca;
        Utils.setErrorPrincipal("Cargando parametros de Nueva Marca", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                    Object[][] categorias = Utils.getArrayOfJSONObject(marcaO, "categoriaM", new String[]{"idcategoria", "nombre"});
                                    Object[][] proveedores = Utils.getArrayOfJSONObject(marcaO, "proveedorM", new String[]{"idproveedor", "nombre"});
                                    Object[][] tallas = Utils.getArrayOfJSONObject(marcaO, "tallaM", new String[]{"idtalla", "codigo", "existe"});
                                    String idmarca = Utils.getStringOfJSONObject(marcaO, "idmarca");
                                    String codigo = Utils.getStringOfJSONObject(marcaO, "codigo");
                                    String nombre = Utils.getStringOfJSONObject(marcaO, "nombre");
                                    String proveedor = Utils.getStringOfJSONObject(marcaO, "idproveedor");
                                    String categoria = Utils.getStringOfJSONObject(marcaO, "idcategoria");
                                    String codigobarra = Utils.getStringOfJSONObject(marcaO, "codigobarra");
                                    String imagen = Utils.getStringOfJSONObject(marcaO, "imagen");
                                       Window.alert("se preciono el boton nuevo");
//                                    formulario = null;
//                                    formulario = new EditarMarcaForm(idmarca, categoria, proveedor, codigo, codigobarra, nombre, imagen,categorias, proveedores, tallas, Marca.this);
//                                    formulario.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }
  
    private void aniadirListenersMarcas() {
        //**************************************************
        //***********ELIMINAR ROL
        //**************************************************

        eliminarMuestra.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                Record[] records = cbSelectionModel.getSelections();
                if (records.length == 1) {
                    selecionado = records[0].getAsString("idmarca");
                    MessageBox.confirm("Eliminar Marca", "Realmente desea eliminar esta Marca??", new MessageBox.ConfirmCallback() {

                        public void execute(String btnID) {
                            if (btnID.equalsIgnoreCase("yes")) {
                                //eliminar
                                String enlace = "php/Marca.php?funcion=EliminarMarca&idmarca=" + selecionado;
                                Utils.setErrorPrincipal("Eliminando la Marca", "cargar");
                                final Conector conec = new Conector(enlace, false);
                                try {
                                    conec.getRequestBuilder().sendRequest("asdf", new RequestCallback() {

                                        public void onResponseReceived(Request request, Response response) {
                                            String data = response.getText();
                                            JSONValue jsonValue = JSONParser.parse(data);
                                            JSONObject jsonObject;
                                            if ((jsonObject = jsonValue.isObject()) != null) {
                                                String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                                                String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                                                if (errorR.equalsIgnoreCase("true")) {
                                                    Utils.setErrorPrincipal(mensajeR, "mensaje");
                                                    reload();
                                                } else {
                                                    //Window.alert(mensajeR);
                                                    Utils.setErrorPrincipal(mensajeR, "error");
                                                }
                                            }
                                        }

                                        public void onError(Request request, Throwable exception) {
                                            //Window.alert("Ocurrio un error al conectar con el servidor ");
                                            Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                                        }
                                    });
                                } catch (RequestException ex) {
                                    //Window.alert("Ocurrio un error al conectar con el servidor");
                                    Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                                }
                            }
                        }
                    });
                } else {
                    MessageBox.alert("No hay venta selecionado para editar y/o selecciono mas de uno.");
                }
                eliminarMuestra.setPressed(false);
            }
        });
        //**************************************************
        //***********NUEVA MARCA
        //**
        nuevoMuestra.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                CargarDatosNuevaMarca();
            }
        });
//        codmaterialMarca.addListener(
//                new ButtonListenerAdapter() {
//
//                    @Override
//                    public void onClick(Button button, EventObject e) {
//                        Record[] records = cbSelectionModel.getSelections();
//
//                        if (records.length == 1) {
//                            selecionado = records[0].getAsString("idmarca");
////MessageBox.alert("Menu codificador");
//                            CargarDatosCodificarMaterial(selecionado);
//
//
//                        } else {
//                            MessageBox.alert("Seleccione Una Marca");
//                        }
//
//                        codmaterialMarca.setPressed(false);
//                    }
//                });

//        codcolorMarca.addListener(
//                new ButtonListenerAdapter() {
//
//                    @Override
//                    public void onClick(Button button, EventObject e) {
//                        Record[] records = cbSelectionModel.getSelections();
//
//                        if (records.length == 1) {
//                            selecionado = records[0].getAsString("idmarca");
////MessageBox.alert("Menu codificador");
//                            CargarDatosCodificarColor(selecionado);
//
//
//                        } else {
//                            MessageBox.alert("Seleccione Una Marca");
//                        }
//
//                        codcolorMarca.setPressed(false);
//                    }
//                });

//        cargarimagenMarca.addListener(
//                new ButtonListenerAdapter() {
//
//                    @Override
//                    public void onClick(Button button, EventObject e) {
//
//                        Record[] records = cbSelectionModel.getSelections();
//                        if (records.length == 1) {
//                            selecionado = records[0].getAsString("idmarca");
//                            String enlTemp = "php/uploadimagen.php?funcion=imagen&idmarca=" + selecionado;
//                            com.google.gwt.user.client.Window.open(enlTemp, "_blank", "enlTemp");
////                            verReporte1(enlTemp);
//
//                        } else {
//                            MessageBox.alert("No hay Marca selecionado para subir imagen.");
//                        }
//
//                        cargarimagenMarca.setPressed(false);
//                    }
//                });

        //**************************************************
        //***********EDITAR ROL
        //**************************************************
        editarMuestra.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();
                        if (records.length == 1) {
                            String idmarca = records[0].getAsString("idmarca");
                            cargarDatosEditarMarca(idmarca);
                        } else {

                            Utils.setErrorPrincipal("Por favor seleccione una M para editar", "error");
                        }

                    }
                });
        reporteMuestra.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();

                        if (records.length == 1) {
                            selecionado = records[0].getAsString("idmuestra");
                            String enlTemp = "funcion=reportemuestraHTML&idmuestra=" + selecionado;
                            verReporte(enlTemp);

                        } else {
                            MessageBox.alert("No hay marca selecionado para ver el reporte.");
                        }

                        reporteMuestra.setPressed(false);
                    }
                });
//        configurarMarca.addListener(
//                new ButtonListenerAdapter() {
//
//                    @Override
//                    public void onClick(Button button, EventObject e) {
//                        Record[] records = cbSelectionModel.getSelections();
//                        if (records.length == 1) {
//                            String idmarca = records[0].getAsString("idmarca");
//                            cargarDatosConfigurarMarca(idmarca);
//                        } else {
//
//                            Utils.setErrorPrincipal("Por favor seleccione una Marca para configurar", "error");
//                        }
//
//                    }
//                });
//        codlineaMuestra.addListener(
//                new ButtonListenerAdapter() {
//
//                    @Override
//                    public void onClick(Button button, EventObject e) {
//                        Record[] records = cbSelectionModel.getSelections();
//                        if (records.length == 1) {
//                            String idmarca = records[0].getAsString("idmarca");
//                            cargarDatosConfigurarLineaMarca(idmarca);
//                        } else {
//
//                            Utils.setErrorPrincipal("Por favor seleccione una Marca para configurar", "error");
//                        }
//
//                    }
//                });

//        modeloMarca.addListener(
//                new ButtonListenerAdapter() {
//
//                    @Override
//                    public void onClick(Button button, EventObject e) {
//                        Record[] records = cbSelectionModel.getSelections();
//                        if (records.length == 1) {
//                            String idmarca = records[0].getAsString("idmarca");
//                            cargarDatosNuevoModelo(idmarca);
//                        } else {
//
//                            Utils.setErrorPrincipal("Por favor seleccione una Marca para Crear Modelos", "error");
//                        }
//
//                    }
//                });



                  reporteImagen.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();

                        if (records.length == 1) {
                            selecionado = records[0].getAsString("idmuestra");
                            String enlTemp = "funcion=reportemuestraProductoHTML&idmuestra=" + selecionado;
                            verReporte(enlTemp);

                        } else {
                            MessageBox.alert("No hay marca selecionado para ver el reporte.");
                        }

                        reporteMuestra.setPressed(false);
                    }
                });


        //**************************************************
        //*********** LISTENERS DE LA TABLA
        //**************************************************
        grid.addListener(
                new PanelListenerAdapter() {

                    @Override
                    public void onRender(Component component) {
                        store.load(0, 100);
                    }
                });
        grid.addGridCellListener(
                new GridCellListenerAdapter() {

                    @Override
                    public void onCellClick(GridPanel grid, int rowIndex, int colIndex, EventObject e) {
                        if (grid.getColumnModel().getDataIndex(colIndex).equals("indoor")) {
                            Record record = grid.getStore().getAt(rowIndex);
                            record.set("indoor", !record.getAsBoolean("indoor"));
                        }

                    }
                });

    }

    public String getLinksaveUpdate(String idrol, String nombre, String estado, Object[] seleccionados) {
        String dev = "";
        if (seleccionados.length >= 1) {

            if (idrol == null) {
                idrol = "nuevo";
            }
            JSONObject todos = new JSONObject();
            todos.put("idrol", new JSONString(idrol));
            todos.put("nombre", new JSONString(nombre));
            todos.put("estado", new JSONString(estado));
            JSONArray funcS = new JSONArray();
            for (int i = 0; i < seleccionados.length; i++) {
                Checkbox che = (Checkbox) seleccionados[i];
                funcS.set(i, new JSONString(che.getId().substring(1)));
            }
            todos.put("funciones", funcS);
            dev = todos.toString();
        } else {
            Utils.setErrorPrincipal("Por favor seleccione por lo menos una funacion", "error");
        }
        return dev;
    }

    private void verReporte(String enlace) {
        ReporteMediaCartaChorroWindow print = new ReporteMediaCartaChorroWindow(enlace);
        print.show();
    }
}

