/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.balderrama.client.Almacenes;

import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONParser;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;
import com.gwtext.client.data.DataProxy;
import com.gwtext.client.data.FieldDef;
import com.gwtext.client.data.JsonReader;
import com.gwtext.client.data.RecordDef;
import com.gwtext.client.data.ScriptTagProxy;
import com.gwtext.client.data.StringFieldDef;
import com.gwtext.client.widgets.Button;
import com.gwtext.client.widgets.Component;
import com.gwtext.client.widgets.MessageBox;
import com.gwtext.client.widgets.PagingToolbar;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.QuickTipsConfig;
import com.gwtext.client.widgets.ToolbarButton;
import com.gwtext.client.widgets.event.ButtonListenerAdapter;
import com.gwtext.client.widgets.event.PanelListenerAdapter;
import com.gwtext.client.widgets.grid.ColumnConfig;
import com.gwtext.client.widgets.grid.ColumnModel;
import com.gwtext.client.widgets.grid.EditorGridPanel;
import com.gwtext.client.widgets.grid.GridPanel;
import com.gwtext.client.widgets.grid.event.GridCellListenerAdapter;
import com.gwtext.client.core.EventObject;
import com.gwtext.client.core.ExtElement;
import com.gwtext.client.core.UrlParam;
import com.gwtext.client.data.Record;
import com.gwtext.client.data.Store;
import com.gwtext.client.util.Format;
import com.gwtext.client.widgets.grid.BaseColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxSelectionModel;
import com.gwtext.client.widgets.grid.RowNumberingColumnConfig;
import org.balderrama.client.util.Conector;
import com.gwtext.client.widgets.form.Checkbox;
import com.gwtext.client.widgets.form.Field;
import com.gwtext.client.widgets.form.event.TextFieldListenerAdapter;
import com.gwtext.client.widgets.grid.CellMetadata;
import com.gwtext.client.widgets.grid.Renderer;
import com.gwtext.client.widgets.grid.event.GridRowListenerAdapter;
import org.balderrama.client.util.BuscadorToolBar;
import org.balderrama.client.util.ReporteMediaCartaChorroWindow;
import org.balderrama.client.util.Utils;
//import org.balderrama.client.pedido.Reportes;

/**
 *
 * @author 
 */
public class KardexAlmacen extends Panel {

    private GridPanel grid;
    private ColumnConfig idColumn;
    private ColumnConfig codigoColumn;
    private ColumnConfig ciudadColumn;
    private ColumnConfig tipoColumn;
    private ColumnConfig nombreColumn;
    private ColumnConfig telefonoColumn;
    private ColumnConfig direccionColumn;
 private ColumnConfig precio1susColumn;

    private BuscadorToolBar buscadorToolBar;
    protected String buscarcodigo;
    protected String buscarlinea;
    protected String buscarmarca;
    protected String buscarestado;
    private ToolbarButton buscar;

    private ColumnConfig faxColumn;
    private final int ANCHO = Utils.getScreenWidth() - 24;
    private final int ALTO = Utils.getScreenHeight() - 270;
    private ToolbarButton editarAlmacen;
    //private ToolbarButton eliminarAlmacen;
    private ToolbarButton nuevoAlmacen;
    private ToolbarButton reporteAlmacen;

    //private EditarNuevoAlmacen formulario;

    protected ExtElement ext_element;
    CheckboxSelectionModel cbSelectionModel;
    Store store;
    private String selecionado;
    private BaseColumnConfig[] columns;
    ColumnModel columnModel;
     String idmarca;


    public KardexAlmacen(String idmarca) {
        this.setClosable(true);
        this.setId("TPfun5015");
          this.idmarca = idmarca;

        setIconCls("tab-icon");
        setAutoScroll(false);
        setTitle("Kardex");
        setTitle("Kardex" + idmarca);
        onModuleLoad();
    }

    public void onModuleLoad() {

        DataProxy dataProxy = new ScriptTagProxy("php/KardexAlmacen.php?funcion=ListarProductosKardexAlmacen&idmarca="+idmarca);
       
        final RecordDef recordDef = new RecordDef(new FieldDef[]{
                    new StringFieldDef("idkardexalmacen"),
                    new StringFieldDef("codigo"),
                    new StringFieldDef("marca"),
                    new StringFieldDef("detalle"),
                    new StringFieldDef("saldocantidadcaja"),
                    new StringFieldDef("cantidadpares"),
                    new StringFieldDef("precio1sus")
                });
        JsonReader reader = new JsonReader(recordDef);
        reader.setRoot("resultado");
        reader.setTotalProperty("totalCount");

        store = new Store(dataProxy, reader, true);

        /* columnade idusuario  */
        idColumn = new ColumnConfig("Id kardex", "idkardexalmacen", (ANCHO / 6), true);
        /* columnade nombre  */
        codigoColumn = new ColumnConfig("Codigo", "codigo", (ANCHO / 6), true);
        codigoColumn.setId("expandible");
        tipoColumn = new ColumnConfig("Marca", "marca", (ANCHO / 6), true);

        direccionColumn = new ColumnConfig("Detalle", "detalle", (ANCHO / 6), true);
        telefonoColumn = new ColumnConfig("Cajas", "saldocantidadcaja", (ANCHO / 6), true);

           ciudadColumn = new ColumnConfig("Pares", "cantidadpares", (ANCHO / 6), true);
precio1susColumn = new ColumnConfig("Precio[U]", "precio1sus", (ANCHO / 6), true);

        cbSelectionModel = new CheckboxSelectionModel();
        columns = new BaseColumnConfig[]{
                    new RowNumberingColumnConfig(),
                    new CheckboxColumnConfig(cbSelectionModel),
                    //column ID is company which is later used in setAutoExpandColumn
                    //                    idColumn,
                    codigoColumn,
                    tipoColumn,
                    direccionColumn,
                    telefonoColumn,
                    ciudadColumn,
                    precio1susColumn,
                  
                };

        columnModel = new ColumnModel(columns);

        grid = new EditorGridPanel();
        grid.setId("grid-lista-Kardex");
        grid.setWidth(ANCHO);
        grid.setHeight(ALTO);
        grid.setTitle("Lista de Productos");
        grid.setStore(store);
        grid.setColumnModel(columnModel);
        grid.setTrackMouseOver(true);
        grid.setAutoExpandColumn("expandible");
        grid.setLoadMask(true);
        grid.setSelectionModel(cbSelectionModel);
        grid.setFrame(true);
        grid.setStripeRows(true);
        grid.setIconCls("grid-icon");
      
//        grid.a


        nuevoAlmacen = new ToolbarButton("Ver Movimiento");
        nuevoAlmacen.setEnableToggle(true);
        QuickTipsConfig tipsConfig1 = new QuickTipsConfig();
        tipsConfig1.setText("Crear Almacen");
        nuevoAlmacen.setTooltip(tipsConfig1);

        editarAlmacen = new ToolbarButton("Ver");
        editarAlmacen.setEnableToggle(true);
        QuickTipsConfig tipsConfig = new QuickTipsConfig();
        tipsConfig.setText("Editar Almacen");
        editarAlmacen.setTooltip(tipsConfig);


        reporteAlmacen = new ToolbarButton("Reporte Calzado");
        reporteAlmacen.setEnableToggle(true);
        QuickTipsConfig tipsConfig3 = new QuickTipsConfig();
        tipsConfig3.setText("Reporte Almacen");
        reporteAlmacen.setTooltip(tipsConfig3);





        PagingToolbar pagingToolbar = new PagingToolbar(store);
        pagingToolbar.setPageSize(100);
        pagingToolbar.setDisplayInfo(true);
        pagingToolbar.setDisplayMsg("Mostrando {0} - {1} de {2}");
        pagingToolbar.setEmptyMsg("No topics to display");
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(nuevoAlmacen);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(editarAlmacen);
        pagingToolbar.addSeparator();
        
        pagingToolbar.addButton(reporteAlmacen);
        pagingToolbar.addSeparator();


        String items[] = {"Codigo", "Linea"};
        String tiposItems[] = {"text", "text"};
        buscadorToolBar = new BuscadorToolBar(items, tiposItems);
        grid.setTopToolbar(buscadorToolBar.getToolbar());
        grid.setBottomToolbar(pagingToolbar);
        buscar = buscadorToolBar.getBuscar();

       // grid.setBottomToolbar(pagingToolbar);

        add(grid);
               addListenersBuscador();

        addListenersBuscadoresText();

        aniadirListenersAlmacen();

    
    }

    public GridPanel getGrid() {
        return grid;
    }

    public void setGrid(GridPanel grid) {
        this.grid = grid;
    }

    public void reload() {
        store.reload();
        grid.reconfigure(store, columnModel);
        grid.getView().refresh();
    }

    private void CargarNuevoAlmacen() {
        String enlace = "php/Almacen.php?funcion=BuscarResponsableCiudad";
        Utils.setErrorPrincipal("Cargando parametros de Nuevo Almacen", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                    Object[][] responsables = Utils.getArrayOfJSONObject(marcaO, "responsableM", new String[]{"idusuario", "nombre"});
                                    Object[][] ciudades = Utils.getArrayOfJSONObject(marcaO, "ciudadM", new String[]{"idciudad", "nombre"});

                               //     formulario = null;
                               //     formulario = new EditarNuevoAlmacen(null, "", "", "", "", "", "", "", responsables, ciudades, Almacen.this);
                               //     formulario.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");

                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }

    private void cargarDatosEditarAlmacen(String idalmacen) {
        String enlace = "php/Almacen.php?funcion=BuscarResponsableCiudadPorAlmacen&idalmacen=" + idalmacen;
        Utils.setErrorPrincipal("Cargando parametros de nuevo almacen", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
//                                    Object[][] responsables = Utils.getArrayOfJSONObject(marcaO, "responsableM", new String[]{"idusuario", "nombre"});
                                    Object[][] ciudades = Utils.getArrayOfJSONObject(marcaO, "ciudadM", new String[]{"idciudad", "nombre"});
                                    String idalmacen = Utils.getStringOfJSONObject(marcaO, "idalmacen");
                                    String codigo = Utils.getStringOfJSONObject(marcaO, "codigo");
                                    String tipo = Utils.getStringOfJSONObject(marcaO, "tipo");
//                                    String almacen = Utils.getStringOfJSONObject(marcaO, "idalmacen");
                                    String nombre = Utils.getStringOfJSONObject(marcaO, "nombre");
                                    String fax = Utils.getStringOfJSONObject(marcaO, "fax");
                                    String telefono = Utils.getStringOfJSONObject(marcaO, "telefono");
                                    String direccion = Utils.getStringOfJSONObject(marcaO, "direccion");
                                    String ciudad = Utils.getStringOfJSONObject(marcaO, "idciudad");
                                   
//                                    String  = Utils.getStringOfJSONObject(marcaO, "estado");
                               //     formulario = null;
                                //    formulario = new EditarNuevoAlmacen(idalmacen, nombre, codigo, tipo, direccion, telefono, fax, ciudad, null, ciudades, Almacen.this);
                                 //   formulario.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }


    private void aniadirListenersAlmacen() {
  
        //**************************************************
        //***********NUEVA MARCA
        //**
        nuevoAlmacen.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                CargarNuevoAlmacen();
            }
        });

        //**************************************************
        //***********EDITAR ROL
        //**************************************************
        editarAlmacen.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();
                        if (records.length == 1) {
                            String idalmacen = records[0].getAsString("idalmacen");
                            cargarDatosEditarAlmacen(idalmacen);
                        } else {

                            Utils.setErrorPrincipal("Por favor seleccione un Almacen para editar", "error");
                        }

                    }
                });
        reporteAlmacen.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {




                        String enlTemp = "Almacenes.jsp";
                        verReporte(enlTemp);


                        reporteAlmacen.setPressed(false);
                    }
                });



        //**************************************************
        //*********** LISTENERS DE LA TABLA
        //**************************************************
        grid.addListener(
                new PanelListenerAdapter() {

                    @Override
                    public void onRender(Component component) {
                        store.load(0, 100);
                    }
                });
        grid.addGridCellListener(
                new GridCellListenerAdapter() {

                    @Override
                    public void onCellClick(GridPanel grid, int rowIndex, int colIndex, EventObject e) {
                        if (grid.getColumnModel().getDataIndex(colIndex).equals("indoor")) {
                            Record record = grid.getStore().getAt(rowIndex);
                            record.set("indoor", !record.getAsBoolean("indoor"));
                        }

                    }
                });

    }

      private void addListenersBuscador() {
        buscar.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                buscarSegunParametros();
            }
        });
    }

    private void addListenersBuscadoresText() {

        //*********************************************************************
        //***************BUSCADOR ID************************************
        //*********************************************************************
        buscadorToolBar.getItemsText1().addListener(new TextFieldListenerAdapter() {

            @Override
            public void onSpecialKey(Field field, EventObject e) {
                if (e.getKey() == EventObject.ENTER) {
                    buscarSegunParametros();
                //com.google.gwt.user.client.Window.alert("apreto el enter en el campo 1");
                }
            }
        });

        //*********************************************************************
        //***************BUSCADOR DE FECHA************************************
        //*********************************************************************
        buscadorToolBar.getItemsText1().addListener(new TextFieldListenerAdapter() {

            @Override
            public void onSpecialKey(Field field, EventObject e) {
                if (e.getKey() == EventObject.ENTER) {
                    buscarSegunParametros();
                //com.google.gwt.user.client.Window.alert("apreto el enter en el campo 1");
                }
            }
        });

    //*********************************************************************
    //***************BUSCADOR DE PROVEEDOR************************************
    //*********************************************************************


    }

    public void buscarSegunParametros() {
        buscarcodigo = buscadorToolBar.getItemsText1().getText();

        buscarlinea = buscadorToolBar.getItemsText2().getText();

        store.reload(new UrlParam[]{
                    new UrlParam("start", 0), new UrlParam("limit", 100),
                    new UrlParam("buscarcodigo", buscarcodigo),
                    new UrlParam("buscarlinea", buscarlinea)
                }, false);
    }

    public String getLinksaveUpdate(String idrol, String nombre, String estado, Object[] seleccionados) {
        String dev = "";
        if (seleccionados.length >= 1) {

            if (idrol == null) {
                idrol = "nuevo";
            }
            JSONObject todos = new JSONObject();
            todos.put("idrol", new JSONString(idrol));
            todos.put("nombre", new JSONString(nombre));
            todos.put("estado", new JSONString(estado));
            JSONArray funcS = new JSONArray();
            for (int i = 0; i < seleccionados.length; i++) {
                Checkbox che = (Checkbox) seleccionados[i];
                funcS.set(i, new JSONString(che.getId().substring(1)));
            }
            todos.put("funciones", funcS);
            dev = todos.toString();
        } else {
            Utils.setErrorPrincipal("Por favor seleccione por lo menos una funcion", "error");
        }
        return dev;
    }

    private void verReporte(String enlace) {
        ReporteMediaCartaChorroWindow print = new ReporteMediaCartaChorroWindow(enlace, "PDF");
        print.show();
    }
}
