/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.balderrama.client.emergentes;

import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONParser;
import com.google.gwt.json.client.JSONValue;
import com.gwtext.client.core.EventObject;
import com.gwtext.client.core.Position;
import com.gwtext.client.data.SimpleStore;
import com.gwtext.client.widgets.Button;
import com.gwtext.client.widgets.Window;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.event.ButtonListenerAdapter;
import com.gwtext.client.widgets.form.ComboBox;
import com.gwtext.client.widgets.form.FormPanel;
import com.gwtext.client.widgets.form.Label;
import com.gwtext.client.widgets.grid.CheckboxSelectionModel;
import com.gwtext.client.widgets.TabPanel;
import com.gwtext.client.widgets.layout.AnchorLayoutData;
import com.gwtext.client.widgets.layout.FitLayout;
import org.balderrama.client.util.Conector;
import org.balderrama.client.util.Utils;
import org.balderrama.client.MainEntryPoint;
import org.balderrama.client.util.KMenu;
import com.gwtext.client.widgets.MessageBox;
import com.gwtext.client.widgets.form.TextField;
import org.balderrama.client.cliente.Cliente;
import org.balderrama.client.Etapas.Control;
import org.balderrama.client.cliente.ClienteDetalle;
import org.balderrama.client.pedido.PanelPedido;
import org.balderrama.client.pedido.Pedido;

/**
 *
 * @author buggy
 */
public class SeleccionProforma extends Window {

    private final int ANCHO = 300;
    private final int ALTO = 90;
    private final AnchorLayoutData ANCHO_LAYOUT_DATA = new AnchorLayoutData("90%");
    private final int WINDOW_PADDING = 5;
    private FormPanel formPanel;
    private ComboBox com_cliente;
    private Button but_aceptarP;
    private Button but_cancelarP;
    private String[] clienteM;
    CheckboxSelectionModel cbSelectionModel;
    public TabPanel tap_panel;
    public KMenu padre;
    public MainEntryPoint panel;
    Pedido ped;
  private String codigo;
  	private TextField tex_codigo;

    public SeleccionProforma(KMenu kmenu) {
        //public IngresoAlmacenForm(KMenu kmenu,MainEntryPoint pan) {
        //com.google.gwt.user.client.Window.alert("Cuantas veces");

        // this.padre = padre
        padre = kmenu;
        //  panel=pan;

        //this.clienteM = new String[]{"CLIENTE MAYOR", "CLIENTE DETALLE"};
        String tituloTabla = "Seleccionar Factura";
        this.setClosable(true);
        this.setId("TPfun101911");
        setIconCls("tab-icon");
        setAutoScroll(false);
        setTitle(tituloTabla);
        setAutoWidth(true);
        setAutoHeight(true);
        setLayout(new FitLayout());
        setPaddings(WINDOW_PADDING);
        setButtonAlign(Position.CENTER);

        setCloseAction(Window.CLOSE);
        //setPlain(true);
        onModuleLoad();

    }

    public void onModuleLoad() {

        //setId("win-Clientes");

        String nombreBoton1 = "Buscar";
        String nombreBoton2 = "Cancelar";

        formPanel = new FormPanel();
        formPanel.setBaseCls("x-plain");
        //formPanel.setLabelWidth(ANCHO - 400);

        but_aceptarP = new Button(nombreBoton1, new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                GuardarEditarCliente(e);
//                            IngresoAlmacen ing=new IngresoAlmacen(IngresoAlmacenForm.this);
//                            padre.seleccionarOpcion(null,"fun5099",e, ing);
//
//                            IngresoAlmacenForm.this.close();
//                            IngresoAlmacenForm.this.setModal(false);
            }
        });
        but_cancelarP = new Button(nombreBoton2, new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                SeleccionProforma.this.destroy();
                SeleccionProforma.this.close();

            }
        });
//        formpanel1 = new Panel();
//        formpanel1.setWidth(50);
//        formpanel1.setHeight(50);
//        label.setHeight(50);
//        label.setWidth(50);
        //formpanel1.add(label);

 tex_codigo = new TextField("Numero Factura", "codigo");

       // com_cliente = new ComboBox("Cliente", "cliente", 200);
       // com_cliente.setValue("CLIENTE MAYOR");
       // com_cliente.setReadOnly(true);
        //com_tipoC.setPosition(50, 50);

        // formPanel.setLabelWidth(ANCHO - 400 - 5);


        //formPanel.add(formpanel1);
        formPanel.add(tex_codigo);
        addButton(but_aceptarP);
        addButton(but_cancelarP);
        add(formPanel);
        //initCombos();

    }

    private void initCombos() {


        SimpleStore tiposStore = new SimpleStore("tipos", clienteM);
        tiposStore.load();
        com_cliente.setDisplayField("tipos");
        com_cliente.setStore(tiposStore);




    }

    public Button getBut_aceptar() {
        return but_aceptarP;
    }

    public Button getBut_cancelar() {
        return but_cancelarP;
    }

    public void GuardarEditarCliente(EventObject e) {
       final String idmarca = tex_codigo.getText();

//init
            //     final String idcliente = com_cliente.getValue();buscarventasporcliente
//String enlace = "php/Cobros.php?funcion=BuscarDatosCliente&idcliente=" + idcliente;
String enlace = "php/Etapas.php?funcion=BuscarDatosEtapa&numerofactura=" + idmarca;

Utils.setErrorPrincipal("Cargando parametros de Etapa", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    private EventObject e;

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                   if ((marcaO = marcaV.isObject()) != null) {
                                   // Object[][] responsables = Utils.getArrayOfJSONObject(marcaO, "responsableM", new String[]{"idusuario", "nombre"});
                                    String num_proforma = Utils.getStringOfJSONObject(marcaO, "numeroproforma");
                                    String num_factura = Utils.getStringOfJSONObject(marcaO, "numerofactura");
                                    String nom_marca = Utils.getStringOfJSONObject(marcaO, "marca");
                                    String num_cantidad = Utils.getStringOfJSONObject(marcaO, "cantidad");

                                    Control control = new Control(idmarca,num_proforma,num_factura,nom_marca,num_cantidad);
            padre.seleccionarOpcion(null, "fun10191", e, control);
            SeleccionProforma.this.clear();
            SeleccionProforma.this.close();

//                                    formulario = null;
////                                formulario = new NuevoCobroForm(idcliente,ciudades,empleados, "", "", "", "", "", "", "","", "", "", "", "", "", "", "", "", SeleccionEmpresaCliente.this);
//           formulario = new NuevoCobroForm(idcliente,cliente,empresa, saldopagar, pagado,cobrador,estado,nit,telefono,item,direccion, SeleccionEmpresaCliente.this);
//
//                                    formulario.onModuleLoad();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");

                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException ea) {
                ea.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }




    }

    public int redondedo(float f) {
        int aux = (int) f;
        if (aux < f) {
            aux = aux + 1;
        }
        return aux;
    }
}