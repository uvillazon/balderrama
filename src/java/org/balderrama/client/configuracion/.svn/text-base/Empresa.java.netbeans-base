/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.balderrama.client.configuracion;

import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONParser;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;
import com.gwtext.client.data.DataProxy;
import com.gwtext.client.data.FieldDef;
import com.gwtext.client.data.JsonReader;
import com.gwtext.client.data.RecordDef;
import com.gwtext.client.data.ScriptTagProxy;
import com.gwtext.client.data.StringFieldDef;
import com.gwtext.client.widgets.Button;
import com.gwtext.client.widgets.Component;
import com.gwtext.client.widgets.MessageBox;
import com.gwtext.client.widgets.PagingToolbar;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.QuickTipsConfig;
import com.gwtext.client.widgets.ToolbarButton;
import com.gwtext.client.widgets.event.ButtonListenerAdapter;
import com.gwtext.client.widgets.event.PanelListenerAdapter;
import com.gwtext.client.widgets.grid.ColumnConfig;
import com.gwtext.client.widgets.grid.ColumnModel;
import com.gwtext.client.widgets.grid.EditorGridPanel;
import com.gwtext.client.widgets.grid.GridPanel;
import com.gwtext.client.widgets.grid.event.GridCellListenerAdapter;
import com.gwtext.client.core.EventObject;
import com.gwtext.client.core.ExtElement;
import com.gwtext.client.data.Record;
import com.gwtext.client.data.Store;
import com.gwtext.client.core.Ext;
import com.gwtext.client.widgets.form.Field;
import com.gwtext.client.util.Format;
import com.gwtext.client.widgets.grid.BaseColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxSelectionModel;
import com.gwtext.client.widgets.grid.RowNumberingColumnConfig;
import org.balderrama.client.util.Conector;
import com.gwtext.client.widgets.form.Checkbox;
import com.gwtext.client.widgets.grid.CellMetadata;
import com.gwtext.client.widgets.grid.Renderer;
import com.gwtext.client.widgets.grid.event.GridRowListenerAdapter;
import com.gwtext.client.widgets.form.event.TextFieldListenerAdapter;
import org.balderrama.client.util.ReporteMediaCartaChorroWindow;
import org.balderrama.client.util.Utils;
import com.gwtext.client.core.UrlParam;
import com.gwtext.client.widgets.Toolbar;
import com.gwtext.client.widgets.form.TextField;
import org.balderrama.client.configuracion.CodificarPrecioForm;
import com.gwtext.client.data.Record;
import com.gwtext.client.data.Store;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.grid.*;

/**
 *
 * @author buggy
 */
public class Empresa extends Panel {

    private GridPanel grid;
    private ColumnConfig idColumn;
    private ColumnConfig nombreColumn;
    private ColumnConfig telefonoColumn;
    private ColumnConfig ciudadColumn;
    private ColumnConfig codigoColumn;
    private ColumnConfig direccionColumn;
    private ColumnConfig estadoColumn;
    private ColumnConfig responsableColumn;
    private final int ANCHO = Utils.getScreenWidth() - 24;
    private final int ALTO = Utils.getScreenHeight() - 270;
//control de precios
      private TextField tex_ciPBU;
    private TextField tex_nombrePBU;
    private TextField tex_apellidosPBU;
	private TextField tex_empresaPBU;
    protected String buscarCi;
    protected String buscarNombres;
    protected String buscarApellido;
	protected String buscarEmpresa;
    protected String buscarLogin;
    private ToolbarButton buscar;
      private Toolbar too_busquedaPBW;
    private ControlPreciosForm controlP;
    private ToolbarButton editarEmpresa;
    private ToolbarButton eliminarEmpresa;
    private ToolbarButton nuevaEmpresa;
//    private ToolbarButton reporteColeccion;
    private ToolbarButton verCliente;
    private ToolbarButton detalleColeccion;
//    private ToolbarButton codmaterialMarca;
//    private ToolbarButton configurarMarca;
//    private ToolbarButton cargarimagenMarca;
//  control de precios
    private NuevaEmpresaForm formulario;
    private Object[][] ciudadM;
//    private ConfigurarMarcaForm formulario1;
    protected ExtElement ext_element;
    CheckboxSelectionModel cbSelectionModel;
    Store store;
    private String selecionado;
    private BaseColumnConfig[] columns;
    ColumnModel columnModel;
    public CodificarPrecioForm precioForm;
    //variables para buscador
    PagingToolbar pagingToolbar1124;
    String selecionado1124 = "";

    public Empresa() {
        this.setClosable(true);
        this.setId("TPfun1015");
        setIconCls("tab-icon");
        setAutoScroll(false);
        setTitle("Lista Empresas");
      //  ciudadM = ciudad;
        onModuleLoad();
    }

    public void onModuleLoad() {

        DataProxy dataProxy = new ScriptTagProxy("php/Empresa.php?funcion=ListarEmpresa");
        final RecordDef recordDef = new RecordDef(new FieldDef[]{
                    new StringFieldDef("idempresa"),
                    new StringFieldDef("codigo"),
                    new StringFieldDef("nombre"),
                    new StringFieldDef("direccion"),
                    new StringFieldDef("telefono"),
                    new StringFieldDef("responsable"),
                    new StringFieldDef("ciudad"),
                    new StringFieldDef("estado")
                });
        JsonReader reader = new JsonReader(recordDef);
        reader.setRoot("resultado");
        reader.setTotalProperty("totalCount");

        store = new Store(dataProxy, reader, true);

        /* columnade idusuario  */
       idColumn = new ColumnConfig("Id Empresa", "idempresa", 200, true);

        idColumn.setWidth(100);
        //idColumn.setId("expandible");
        /* columnade nombre  */
        codigoColumn = new ColumnConfig("Codigo", "codigo", 100, true);
       codigoColumn.setId("expandible");

        nombreColumn = new ColumnConfig("Empresa", "nombre", 250, true);
        responsableColumn = new ColumnConfig("Responsable", "responsable", 250, true);
        telefonoColumn = new ColumnConfig("Telefono", "telefono", 200, true);
        direccionColumn = new ColumnConfig("Direccion", "direccion", 200, true);
        ciudadColumn = new ColumnConfig("Ciudad", "ciudad", 150, true);
        estadoColumn = new ColumnConfig("Estado", "estado", 200, true);



//        direccionColumn=new ColumnConfig("Direccion","direccion",(ANCHO/6) - 50 , true);
//        direccionColumn = new ColumnConfig("Imagen", "imagen", (ANCHO / 6) - 50, true, new Renderer() {
//
//            public String render(Object value, CellMetadata cellMetadata,
//                    Record record, int rowIndex, int colNum, Store store) {
//                return Format.format("<img src=\"images/jpg.php?name=../{0}&size=100\">",
//                        new String[]{record.getAsString("imagen")});
//            }
//        }, "imagen");

        cbSelectionModel = new CheckboxSelectionModel();
        columns = new BaseColumnConfig[]{
                    new RowNumberingColumnConfig(),
                    new CheckboxColumnConfig(cbSelectionModel),
                    //column ID is company which is later used in setAutoExpandColumn
             //       idColumn,
                    codigoColumn,
                    nombreColumn,
                    responsableColumn,
                    telefonoColumn,
                    direccionColumn,
                    ciudadColumn,
                    estadoColumn
                };

        columnModel = new ColumnModel(columns);

        grid = new EditorGridPanel();
        grid.setId("grid-lista-Empresa");
        grid.setWidth(ANCHO);
        grid.setHeight(ALTO);
        grid.setTitle("Lista de Empresas");
        grid.setStore(store);
        grid.setColumnModel(columnModel);
        grid.setTrackMouseOver(true);
        grid.setAutoExpandColumn("expandible");
        grid.setLoadMask(true);
        grid.setSelectionModel(cbSelectionModel);
        grid.setFrame(true);
        grid.setStripeRows(true);
        grid.setIconCls("grid-icon");
           grid.setView(new GridView() {
            @Override
            public String getRowClass(Record record, int index, RowParams rowParams, Store store) {
                String estado = record.getAsString("estado");
                if (estado.equals("Inactivo") == true) {
                    return "RED";

                } else {
                    if (estado.equals("Moroso") == true) {
                    return "YELLOW";

                } else
                    return "none";
                }

            }
        });
        grid.addGridRowListener(new GridRowListenerAdapter() {

            @Override
            public void onRowDblClick(GridPanel grid, int rowIndex, EventObject e) {
//                Window.alert("En contruccion: aqui saldra la informacion del rol en detalle");
                Record[] records = cbSelectionModel.getSelections();


                selecionado = records[0].getAsString("idempresa");
                String enlTemp = "funcion=reporteEmpresaHTML&idempresa=" + selecionado;
                verReporte(enlTemp);
//                    Window.alert(enlTemp);
            }
        });


//        grid.a


        nuevaEmpresa = new ToolbarButton("Nuevo");
        nuevaEmpresa.setEnableToggle(true);
        QuickTipsConfig tipsConfig1 = new QuickTipsConfig();
        tipsConfig1.setText("Crear Empresa");
        nuevaEmpresa.setTooltip(tipsConfig1);

        editarEmpresa = new ToolbarButton("Editar");
        editarEmpresa.setEnableToggle(true);
        QuickTipsConfig tipsConfig = new QuickTipsConfig();
        tipsConfig.setText("Editar Empresa");
        editarEmpresa.setTooltip(tipsConfig);

        eliminarEmpresa = new ToolbarButton("Eliminar");
        eliminarEmpresa.setEnableToggle(true);
        QuickTipsConfig tipsConfig2 = new QuickTipsConfig();
        tipsConfig2.setText("Eliminar Empresa");
        eliminarEmpresa.setTooltip(tipsConfig2);

        verCliente = new ToolbarButton("Ver Clientes Empresa");
        verCliente.setEnableToggle(true);
        QuickTipsConfig tipsConfig4 = new QuickTipsConfig();
        tipsConfig4.setText("Ver Clientes");
        verCliente.setTooltip(tipsConfig4);
//      control de precios


        detalleColeccion = new ToolbarButton("Reporte");
        detalleColeccion.setEnableToggle(true);
        QuickTipsConfig tipsConfig50 = new QuickTipsConfig();
        tipsConfig50.setText("Detalle Coleccion");
        detalleColeccion.setTooltip(tipsConfig50);

        PagingToolbar pagingToolbar = new PagingToolbar(store);
        pagingToolbar.setPageSize(100);
        pagingToolbar.setDisplayInfo(true);
        pagingToolbar.setDisplayMsg("Mostrando {0} - {1} de {2}");
        pagingToolbar.setEmptyMsg("No topics to display");
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(nuevaEmpresa);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(editarEmpresa);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(eliminarEmpresa);
        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(reporteColeccion);
//        pagingToolbar.addSeparator();
        pagingToolbar.addButton(verCliente);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(detalleColeccion);
//        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(codcolorMarca);
//        pagingToolbar.addSeparator();
//        pagingToolbar.addButton(configurarMarca);
//        pagingToolbar.addSeparator();

        //para el buscador
too_busquedaPBW = new Toolbar();

        tex_ciPBU = new TextField("Codigo", "codigo");
        tex_nombrePBU = new TextField("Empresa", "nombre");
        tex_apellidosPBU = new TextField("Responsable", "responsable");
        tex_empresaPBU = new TextField("Estado", "estado");

		buscar = new ToolbarButton("Buscar");
        buscar.setPressed(true);

        too_busquedaPBW.addText("CODIGO:");
        too_busquedaPBW.addField(tex_ciPBU);
        too_busquedaPBW.addText("EMPRESA:");
        too_busquedaPBW.addField(tex_nombrePBU);
        too_busquedaPBW.addText("RESPONSABLE:");
        too_busquedaPBW.addField(tex_apellidosPBU);
too_busquedaPBW.addText("ESTADO:");
        too_busquedaPBW.addField(tex_empresaPBU);
        too_busquedaPBW.addButton(buscar);
        grid.setTopToolbar(too_busquedaPBW);

        grid.setBottomToolbar(pagingToolbar);
aniadirListenersBuscador();
        aniadirListenersBuscadoresText();
        add(grid);
        //panel.add(grid);
        aniadirListenersCliente();


    //RootPanel.get().add(panel);
    }

    public GridPanel getGrid() {
        return grid;
    }

    public void setGrid(GridPanel grid) {
        this.grid = grid;
    }

    public void reload() {
        store.reload();
        grid.reconfigure(store, columnModel);
        grid.getView().refresh();
    }

    private void CargarNuevaEmpresa() {
  String enlace = "php/Cobros.php?funcion=BuscarCiudadCobrador";
        Utils.setErrorPrincipal("Cargando parametros de Empresa", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                   // Object[][] responsables = Utils.getArrayOfJSONObject(marcaO, "responsableM", new String[]{"idusuario", "nombre"});
                                    Object[][] ciudades = Utils.getArrayOfJSONObject(marcaO, "ciudadM", new String[]{"idciudad", "nombre"});
                                    Object[][] empleados = Utils.getArrayOfJSONObject(marcaO, "empleadoM", new String[]{"idempleado", "nombre"});

                                    formulario = null;
                          //          formulario = new EditarNuevoAlmacen(null, "", "", "", "", "", "", "", responsables, ciudades, Almacen.this);
                                formulario = new NuevaEmpresaForm(null,ciudades,empleados, "","", "", "", "", "", "", "","", "", "", "", "", "", "", "", "", "", "", "", "", "", Empresa.this);

                                    formulario.onModuleLoad();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");

                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }

    }

      private void cargarDatosEditarColeccion(String idempresa) {
        String enlace = "php/Empresa.php?funcion=BuscarEmpresaPorId&idempresa=" + idempresa;
        Utils.setErrorPrincipal("Cargando parametros de empresa", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
  Object[][] ciudades = Utils.getArrayOfJSONObject(marcaO, "ciudadM", new String[]{"idciudad", "nombre"});
                                    Object[][] empleados = Utils.getArrayOfJSONObject(marcaO, "empleadoM", new String[]{"idempleado", "nombre"});
                                   String idempresa = Utils.getStringOfJSONObject(marcaO, "idempresa");
                                    String codigo = Utils.getStringOfJSONObject(marcaO, "codigo");
                                    String nombre = Utils.getStringOfJSONObject(marcaO, "nombre");
                                    String direccion = Utils.getStringOfJSONObject(marcaO, "direccion");
                                    String telefono = Utils.getStringOfJSONObject(marcaO, "telefono");
                                    String fax = Utils.getStringOfJSONObject(marcaO, "fax");
                                    String fecha = Utils.getStringOfJSONObject(marcaO, "fecha");
                                  String fechaContrato= Utils.getStringOfJSONObject(marcaO, "fechacontrato");
                                    String estado= Utils.getStringOfJSONObject(marcaO, "estado");
                                    String ciudad= Utils.getStringOfJSONObject(marcaO, "ciudad");
                                    String nombres= Utils.getStringOfJSONObject(marcaO, "nombres");
                                     String apellidos= Utils.getStringOfJSONObject(marcaO, "apellidos");
                                      String nitres= Utils.getStringOfJSONObject(marcaO, "nit");
                                    String telefonoRes= Utils.getStringOfJSONObject(marcaO, "telefonores");
                                    String celularRes= Utils.getStringOfJSONObject(marcaO, "celularres");
                                    String email= Utils.getStringOfJSONObject(marcaO, "email");
                                           String direccionRes= Utils.getStringOfJSONObject(marcaO, "direccionres");
                                           String comision= Utils.getStringOfJSONObject(marcaO, "comision");
                                           String saldoAnterior= Utils.getStringOfJSONObject(marcaO, "saldoanterior");
                                           String saldoActual= Utils.getStringOfJSONObject(marcaO, "saldoactual");
                                           String planillaActual= Utils.getStringOfJSONObject(marcaO, "planillaactual");
                                           String tipoPlanilla= Utils.getStringOfJSONObject(marcaO, "tipoplanilla");
                                           String empleadoAsignado= Utils.getStringOfJSONObject(marcaO, "empleadoasignado");
//                                    String  = Utils.getStringOfJSONObject(marcaO, "estado");
                                              formulario = null;
 formulario = new NuevaEmpresaForm(idempresa,ciudades,empleados, codigo, nombre, direccion, telefono, fax, fecha, fechaContrato,estado, ciudad, nombres, apellidos,nitres, telefonoRes, celularRes, email, direccionRes, comision, saldoAnterior, saldoActual, planillaActual, tipoPlanilla, empleadoAsignado, Empresa.this);

                                    formulario.onModuleLoad();
                        } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }



//
    private void aniadirListenersCliente() {
        //**************************************************
        //***********ELIMINAR ROL
        //**************************************************

        eliminarEmpresa.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                Record[] records = cbSelectionModel.getSelections();
                if (records.length == 1) {
                    selecionado = records[0].getAsString("idempresa");
                    MessageBox.confirm("Eliminar Empresa", "Realmente desea eliminar la empresa??", new MessageBox.ConfirmCallback() {

                        public void execute(String btnID) {
                            if (btnID.equalsIgnoreCase("yes")) {
                                //eliminar
                                String enlace = "php/Empresa.php?funcion=EliminarEmpresa&idempresa=" + selecionado;
                                Utils.setErrorPrincipal("Eliminando la Empresa", "cargar");
                                final Conector conec = new Conector(enlace, false);
                                try {
                                    conec.getRequestBuilder().sendRequest("asdf", new RequestCallback() {

                                        public void onResponseReceived(Request request, Response response) {
                                            String data = response.getText();
                                            JSONValue jsonValue = JSONParser.parse(data);
                                            JSONObject jsonObject;
                                            if ((jsonObject = jsonValue.isObject()) != null) {
                                                String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                                                String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                                                if (errorR.equalsIgnoreCase("true")) {
                                                    Utils.setErrorPrincipal(mensajeR, "mensaje");
                                                    reload();
                                                } else {
                                                    //Window.alert(mensajeR);
                                                    Utils.setErrorPrincipal(mensajeR, "error");
                                                }
                                            }
                                        }

                                        public void onError(Request request, Throwable exception) {
                                            //Window.alert("Ocurrio un error al conectar con el servidor ");
                                            Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                                        }
                                    });
                                } catch (RequestException ex) {
                                    //Window.alert("Ocurrio un error al conectar con el servidor");
                                    Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                                }
                            }
                        }
                    });
                } else {
                    MessageBox.alert("No hay Coleccion selecionado para la Eliminacion  y/o selecciono mas de uno.");
                }
                eliminarEmpresa.setPressed(false);
            }
        });
        //**************************************************
        //***********NUEVA MARCA
        //**
        nuevaEmpresa.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                CargarNuevaEmpresa();
            }
        });

        //**************************************************
        //***********EDITAR ROL
        //**************************************************
        editarEmpresa.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();
                        if (records.length == 1) {
                            String idcoleccion = records[0].getAsString("idempresa");
                            cargarDatosEditarColeccion(idcoleccion);
                        } else {

                            Utils.setErrorPrincipal("Por favor seleccione una Empresa para Editar", "error");
                        }

                    }
                });
        verCliente.addListener(
                 new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();

                        if (records.length == 1) {
                            selecionado = records[0].getAsString("idempresa");
                            String enlTemp = "funcion=reportesclienteHTML&idempresa=" + selecionado;
                            verReporte(enlTemp);

                        } else {
                            MessageBox.alert("No hay Clientes para ver el reporte.");
                        }

                        verCliente.setPressed(false);
                    }
                });
        detalleColeccion.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();

                        if (records.length == 1) {
                            selecionado = records[0].getAsString("idempresa");
                            String enlTemp = "funcion=reporteEmpresaHTML&idempresa=" + selecionado;
                            verReporte(enlTemp);

                        } else {
                            MessageBox.alert("No hay coleccion selecionado para ver el reporte.");
                        }

                        detalleColeccion.setPressed(false);
                    }
                });

        //**************************************************
        //*********** LISTENERS DE LA TABLA
        //**************************************************
        grid.addListener(
                new PanelListenerAdapter() {

                    @Override
                    public void onRender(Component component) {
                        store.load(0, 100);
                    }
                });
        grid.addGridCellListener(
                new GridCellListenerAdapter() {

                    @Override
                    public void onCellClick(GridPanel grid, int rowIndex, int colIndex, EventObject e) {
                        if (grid.getColumnModel().getDataIndex(colIndex).equals("indoor")) {
                            Record record = grid.getStore().getAt(rowIndex);
                            record.set("indoor", !record.getAsBoolean("indoor"));
                        }

                    }
                });

    }
public void aniadirListenersBuscador() {

        buscar.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                Utils.setErrorPrincipal("Se realizo la busqueda", "mensaje");
                buscarSegunParametros();
            }
        });
    }

    public void aniadirListenersBuscadoresText() {
        //**************************************************
        //*********** BUSCADOR CI
        //**************************************************
        tex_apellidosPBU.addListener(new TextFieldListenerAdapter() {

            @Override
            public void onSpecialKey(Field field, EventObject e) {
                if (e.getKey() == EventObject.ENTER) {
                    buscarSegunParametros();
                //com.google.gwt.user.client.Window.alert("apreto el enter en el campo 1");
                }
            }
        });

        //**************************************************
        //*********** BUSCADOR NOMBRE
        //**************************************************
        tex_ciPBU.addListener(new TextFieldListenerAdapter() {

            @Override
            public void onSpecialKey(Field field, EventObject e) {
                if (e.getKey() == EventObject.ENTER) {
                    buscarSegunParametros();
                //com.google.gwt.user.client.Window.alert("apreto el enter en el campo 2");
                }
            }
        });

        //**************************************************
        //*********** BUSCADOR APELLIDOS
        //**************************************************
//**************************************************
        //*********** BUSCADOR EMpresa
        //**************************************************
        tex_empresaPBU.addListener(new TextFieldListenerAdapter() {

            @Override
            public void onSpecialKey(Field field, EventObject e) {
                if (e.getKey() == EventObject.ENTER) {
                    buscarSegunParametros();
                //com.google.gwt.user.client.Window.alert("apreto el enter en el campo 2");
                }
            }
        });


        //**************************************************
        //*********** BUSCADOR LOGIN
        //**************************************************
        tex_nombrePBU.addListener(new TextFieldListenerAdapter() {

            @Override
            public void onSpecialKey(Field field, EventObject e) {
                if (e.getKey() == EventObject.ENTER) {
                    buscarSegunParametros();
                //com.google.gwt.user.client.Window.alert("apreto el enter en el campo 1");
                }
            }
        });

    }

      public void buscarSegunParametros() {
        store.reload(new UrlParam[]{new UrlParam("start", 0), new UrlParam("limit", 100),
                    new UrlParam("buscarcodigo", tex_ciPBU.getText()),
                    new UrlParam("buscarempresa", tex_nombrePBU.getText()),
                    new UrlParam("buscarresponsable", tex_apellidosPBU.getText()),
					new UrlParam("buscarestado", tex_empresaPBU.getText())}, false);
    }
   
  
    private void verReporte(String enlace) {
        ReporteMediaCartaChorroWindow print = new ReporteMediaCartaChorroWindow(enlace);
        print.show();
    }

    
    void buscarProductosSinKardex() {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    void buscarProductos() {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}

