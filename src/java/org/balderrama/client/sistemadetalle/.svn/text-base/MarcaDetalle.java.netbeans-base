/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.balderrama.client.sistemadetalle;

import com.google.gwt.http.client.Request;
import com.google.gwt.http.client.RequestCallback;
import com.google.gwt.http.client.RequestException;
import com.google.gwt.http.client.Response;
import com.google.gwt.json.client.JSONArray;
import com.google.gwt.json.client.JSONObject;
import com.google.gwt.json.client.JSONParser;
import com.google.gwt.json.client.JSONString;
import com.google.gwt.json.client.JSONValue;
import com.gwtext.client.data.DataProxy;
import com.gwtext.client.data.FieldDef;
import com.gwtext.client.data.JsonReader;
import com.gwtext.client.data.RecordDef;
import com.gwtext.client.data.ScriptTagProxy;
import com.gwtext.client.data.StringFieldDef;
import com.gwtext.client.widgets.Button;
import com.gwtext.client.widgets.Component;
import com.gwtext.client.widgets.MessageBox;
import com.gwtext.client.widgets.PagingToolbar;
import com.gwtext.client.widgets.Panel;
import com.gwtext.client.widgets.QuickTipsConfig;
import com.gwtext.client.widgets.ToolbarButton;
import com.gwtext.client.widgets.event.ButtonListenerAdapter;
import com.gwtext.client.widgets.event.PanelListenerAdapter;
import com.gwtext.client.widgets.grid.ColumnConfig;
import com.gwtext.client.widgets.grid.ColumnModel;
import com.gwtext.client.widgets.grid.EditorGridPanel;
import com.gwtext.client.widgets.grid.GridPanel;
import com.gwtext.client.widgets.grid.event.GridCellListenerAdapter;
import com.gwtext.client.core.EventObject;
import com.gwtext.client.core.ExtElement;
import com.gwtext.client.data.Record;
import com.gwtext.client.data.Store;
import com.gwtext.client.util.Format;
import com.gwtext.client.widgets.grid.BaseColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxColumnConfig;
import com.gwtext.client.widgets.grid.CheckboxSelectionModel;
import com.gwtext.client.widgets.grid.RowNumberingColumnConfig;
import org.balderrama.client.util.Conector;
import com.gwtext.client.widgets.form.Checkbox;
import com.gwtext.client.core.Ext;
import com.gwtext.client.widgets.grid.CellMetadata;
import com.gwtext.client.widgets.grid.Renderer;
import com.gwtext.client.widgets.grid.event.GridRowListenerAdapter;
import org.balderrama.client.configuracion.ControlPrecioMarca;
import org.balderrama.client.util.ReporteMediaCartaChorroWindow;
import org.balderrama.client.util.Utils;

/**
 *
 * @author buggy
 */
public class MarcaDetalle extends Panel {

    private GridPanel grid;
    private ColumnConfig idColumn;
    private ColumnConfig codigoColumn;
    // private ColumnConfig detalleColumn;
    private ColumnConfig nombreColumn;
    private ColumnConfig ciudadColumn;
    private ColumnConfig imagenColumn;
    private final int ANCHO = Utils.getScreenWidth() - 24;
    private final int ALTO = Utils.getScreenHeight() - 270;
    private ToolbarButton editarMarcadetalle;
    private ToolbarButton eliminarMarcadetalle;
    private ToolbarButton nuevoMarcadetalle;
    private ToolbarButton anadirModelo;
    private ToolbarButton ControlPrecio;
//    private ToolbarButton codlineaMarca;
//    private ToolbarButton codcolorMarca;
//    private ToolbarButton codmaterialMarca;
//    private ToolbarButton configurarMarca;
//    private ToolbarButton cargarimagenMarca;
    private EditarNuevoMarcaDetalle formulario;
    private EditarModeloDetalle formulario1;
    private ControlPrecioMarca controlP;
//    private ConfigurarMarcaForm formulario1;
    protected ExtElement ext_element;
    CheckboxSelectionModel cbSelectionModel;
    Store store;
    private String selecionado;
    private BaseColumnConfig[] columns;
    ColumnModel columnModel;

    public MarcaDetalle() {
        this.setClosable(true);
        this.setId("TPfun1509");
        setIconCls("tab-icon");
        setAutoScroll(false);
        setTitle("Marcas Nacionales");
        onModuleLoad();
    }

    public void onModuleLoad() {

        DataProxy dataProxy = new ScriptTagProxy("php/MarcaDetalle.php?funcion=ListarMarca");
        final RecordDef recordDef = new RecordDef(new FieldDef[]{
                    new StringFieldDef("idmarca"),
                    new StringFieldDef("codigo"),
                    new StringFieldDef("nombre"),
                    new StringFieldDef("ciudad"),
                    //                    new StringFieldDef("nombre"),
                    new StringFieldDef("imagen")
                });
        JsonReader reader = new JsonReader(recordDef);
        reader.setRoot("resultado");
        reader.setTotalProperty("totalCount");

        store = new Store(dataProxy, reader, true);

        /* columnade idusuario  */
        idColumn = new ColumnConfig("Id Marca", "idmarca", (ANCHO / 7) - 50, true);
        idColumn.setId("expandible");
        /* columnade nombre  */
        codigoColumn = new ColumnConfig("Codigo", "codigo", (ANCHO / 4), true);
        codigoColumn.setId("expandible");
        nombreColumn = new ColumnConfig("Nombre", "nombre", (ANCHO / 4), true);
        ciudadColumn = new ColumnConfig("Ciudad", "ciudad", (ANCHO / 4), true);
        imagenColumn = new ColumnConfig("Imagen", "imagen", (ANCHO / 4), true, new Renderer() {

            public String render(Object value, CellMetadata cellMetadata,
                    Record record, int rowIndex, int colNum, Store store) {
                return Format.format("<img src=\"images/jpg.php?name={0}&size=100\">",
                        new String[]{record.getAsString("imagen")});
            }
        }, "imagen");




        cbSelectionModel = new CheckboxSelectionModel();
        columns = new BaseColumnConfig[]{
                    new RowNumberingColumnConfig(),
                    new CheckboxColumnConfig(cbSelectionModel),
                    //column ID is company which is later used in setAutoExpandColumn

                    codigoColumn,
                    nombreColumn,
                    //                    nombreColumn,

                    ciudadColumn,
                    imagenColumn, //                    estadoColumn
                };

        columnModel = new ColumnModel(columns);

        grid = new EditorGridPanel();
        grid.setId("grid-lista-MarcaDetalle");
        grid.setWidth(ANCHO);
        grid.setHeight(ALTO);
        grid.setTitle("Lista de Marca Detalle");
        grid.setStore(store);
        grid.setColumnModel(columnModel);
        grid.setTrackMouseOver(true);
        grid.setAutoExpandColumn("expandible");
        grid.setLoadMask(true);
        grid.setSelectionModel(cbSelectionModel);
        grid.setFrame(true);
        grid.setStripeRows(true);
        grid.setIconCls("grid-icon");
        grid.addGridRowListener(new GridRowListenerAdapter() {

            @Override
            public void onRowDblClick(GridPanel grid, int rowIndex, EventObject e) {
//                Window.alert("En contruccion: aqui saldra la informacion del rol en detalle");
                Record[] records = cbSelectionModel.getSelections();


                selecionado = records[0].getAsString("idgasto");
                String enlTemp = "funcion=reporteAlmacenHTML&idalmacen=" + selecionado;
                verReporte(enlTemp);
//                    Window.alert(enlTemp);
            }
        });

//        grid.a


        nuevoMarcadetalle = new ToolbarButton("Nuevo");
        nuevoMarcadetalle.setEnableToggle(true);
        QuickTipsConfig tipsConfig1 = new QuickTipsConfig();
        tipsConfig1.setText("Crear Marca Detalle");
        nuevoMarcadetalle.setTooltip(tipsConfig1);

        editarMarcadetalle = new ToolbarButton("Editar");
        editarMarcadetalle.setEnableToggle(true);
        QuickTipsConfig tipsConfig = new QuickTipsConfig();
        tipsConfig.setText("Editar Marca Detalle");
        editarMarcadetalle.setTooltip(tipsConfig);

        eliminarMarcadetalle = new ToolbarButton("Eliminar");
        eliminarMarcadetalle.setEnableToggle(true);
        QuickTipsConfig tipsConfig2 = new QuickTipsConfig();
        tipsConfig2.setText("Eliminar Marca Detalle");
        eliminarMarcadetalle.setTooltip(tipsConfig2);


        anadirModelo = new ToolbarButton("Anadir Modelo");
        anadirModelo.setEnableToggle(true);
        QuickTipsConfig tipsConfig10 = new QuickTipsConfig();
        tipsConfig10.setText("Anadir Modelo");
        anadirModelo.setTooltip(tipsConfig10);

        ControlPrecio = new ToolbarButton("Control de Precioss");
        ControlPrecio.setEnableToggle(true);
        QuickTipsConfig tipsConfig12 = new QuickTipsConfig();
        tipsConfig12.setText("Control de Precios");
        ControlPrecio.setTooltip(tipsConfig12);


        PagingToolbar pagingToolbar = new PagingToolbar(store);
        pagingToolbar.setPageSize(100);
        pagingToolbar.setDisplayInfo(true);
        pagingToolbar.setDisplayMsg("Mostrando {0} - {1} de {2}");
        pagingToolbar.setEmptyMsg("No topics to display");
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(nuevoMarcadetalle);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(editarMarcadetalle);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(eliminarMarcadetalle);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(anadirModelo);
        pagingToolbar.addSeparator();
        pagingToolbar.addButton(ControlPrecio);
        grid.setBottomToolbar(pagingToolbar);

        add(grid);
        //panel.add(grid);
        aniadirListenersAlmacen();

    //RootPanel.get().add(panel);
    }

    public GridPanel getGrid() {
        return grid;
    }

    public void setGrid(GridPanel grid) {
        this.grid = grid;
    }

    public void reload() {
        store.reload();
        grid.reconfigure(store, columnModel);
        grid.getView().refresh();
    }

    private void CargarNuevoMarcaDetalle() {
        String enlace = "php/MarcaDetalle.php?funcion=BuscarCiudad";
        Utils.setErrorPrincipal("Cargando parametros de Nueva Marca Detalle", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                    //Object[][] responsables = Utils.getArrayOfJSONObject(marcaO, "responsableM", new String[]{"idusuario", "nombre"});
                                    Object[][] ciudades = Utils.getArrayOfJSONObject(marcaO, "ciudadM", new String[]{"idciudad", "nombre"});

                                    formulario = null;
                                    formulario = new EditarNuevoMarcaDetalle(null, "", "", "", "", "", "", ciudades, MarcaDetalle.this);
                                    formulario.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }

    private void AnadirModelo(String idmarca) {
        String enlace = "php/MarcaDetalle.php?funcion=BuscarCiudadPorMarca&idmarca=" + idmarca;
        Utils.setErrorPrincipal("Cargando parametros de ", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                   
                                    String nombre = Utils.getStringOfJSONObject(marcaO, "nombre");
                                
                                    formulario1 = null;
                                    formulario1 = new EditarModeloDetalle(null, null, nombre, null, null, null, null, null);
                                    formulario1.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }

    private void cargarControlPrecios(String marca) {
        Record[] records = cbSelectionModel.getSelections();
        if (records.length >= 1) {

            Record[] recordss = cbSelectionModel.getSelections();
            JSONArray funcS = new JSONArray();
            for (int i = 0; i < recordss.length; i++) {
                funcS.set(i, new JSONString(recordss[i].getAsString("idmarca")));
            }
            JSONObject joo = new JSONObject();
            joo.put("resultado", funcS);
            String enlace = "php/ModeloDetalle.php?funcion=ListarModeloDetalle&idmarca=" + marca;
            Utils.setErrorPrincipal("Cargando datos control precios", "cargar");
            final Conector conec = new Conector(enlace, false);
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;

                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            String nuevoR = Utils.getStringOfJSONObject(jsonObject, "nuevo");
                            Object[][] datsPro = Utils.getArrayOfJSONObject(jsonObject, "resultado", new String[]{"idmodelo", "codigo", "detalle", "precio1", "precio2", "precio3"});
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");
                                controlP = null;
                                controlP = new ControlPrecioMarca(datsPro, MarcaDetalle.this, nuevoR);
                                controlP.show();
                            } else {
                                Utils.setErrorPrincipal(mensajeR, "error");
                            }

                        }
                    }

                    public void onError(Request request, Throwable exception) {
                        Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                    }
                });
            } catch (RequestException exp) {
                Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
            }
        } else {
            MessageBox.alert("No hay marca(s) selecionado(s) para mostrar");
        }
    }

    private void cargarDatosEditarMarcaDetalle(String idmarca) {
        String enlace = "php/MarcaDetalle.php?funcion=BuscarCiudadPorMarca&idmarca=" + idmarca;
        Utils.setErrorPrincipal("Cargando parametros de ", "cargar");
        final Conector conec = new Conector(enlace, false);
        {
            try {
                conec.getRequestBuilder().sendRequest(null, new RequestCallback() {

                    public void onResponseReceived(Request request, Response response) {
                        String data = response.getText();
                        JSONValue jsonValue = JSONParser.parse(data);
                        JSONObject jsonObject;
                        if ((jsonObject = jsonValue.isObject()) != null) {
                            String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                            String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                            if (errorR.equalsIgnoreCase("true")) {
                                Utils.setErrorPrincipal(mensajeR, "mensaje");

                                JSONValue marcaV = jsonObject.get("resultado");
                                JSONObject marcaO;
                                if ((marcaO = marcaV.isObject()) != null) {
                                    //Object[][] responsables = Utils.getArrayOfJSONObject(marcaO, "responsableM", new String[]{"idusuario", "nombre"});
                                    Object[][] ciudades = Utils.getArrayOfJSONObject(marcaO, "ciudadM", new String[]{"idciudad", "nombre"});
                                    String idmarca = Utils.getStringOfJSONObject(marcaO, "idmarcadetalle");
                                    String codigo = Utils.getStringOfJSONObject(marcaO, "codigo");
                                    String codigobarra = Utils.getStringOfJSONObject(marcaO, "codigobarra");
                                    String imagen = Utils.getStringOfJSONObject(marcaO, "imagen");
                                    String talla = Utils.getStringOfJSONObject(marcaO, "talla");
                                    String nombre = Utils.getStringOfJSONObject(marcaO, "nombre");
                                    String idciudad = Utils.getStringOfJSONObject(marcaO, "idciudad");
//
                                    formulario = null;
                                    formulario = new EditarNuevoMarcaDetalle(idmarca, talla, codigo, nombre, codigobarra, imagen, idciudad, ciudades, MarcaDetalle.this);
                                    formulario.show();
                                } else {
                                    MessageBox.alert("No Hay datos en la consulta");
                                }
                            }
                        } else {
                        }
                        throw new UnsupportedOperationException("Not supported yet.");
                    }

                    public void onError(Request request, Throwable exception) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
                });

            } catch (RequestException e) {
                e.getMessage();
                MessageBox.alert("Ocurrio un error al conectarse con el SERVIDOR");
            }

        }
    }

    private void aniadirListenersAlmacen() {
        //**************************************************
        //***********ELIMINAR ROL
        //**************************************************

        eliminarMarcadetalle.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                Record[] records = cbSelectionModel.getSelections();
                if (records.length == 1) {
                    selecionado = records[0].getAsString("idalmacen");
                    MessageBox.confirm("Eliminar", "Realmente desea eliminar??", new MessageBox.ConfirmCallback() {

                        public void execute(String btnID) {
                            if (btnID.equalsIgnoreCase("yes")) {
                                //eliminar
                                String enlace = "php/Almacen.php?funcion=EliminarAlmacen&idalmacen=" + selecionado;
                                Utils.setErrorPrincipal("Eliminando el Almacen", "cargar");
                                final Conector conec = new Conector(enlace, false);
                                try {
                                    conec.getRequestBuilder().sendRequest("asdf", new RequestCallback() {

                                        public void onResponseReceived(Request request, Response response) {
                                            String data = response.getText();
                                            JSONValue jsonValue = JSONParser.parse(data);
                                            JSONObject jsonObject;
                                            if ((jsonObject = jsonValue.isObject()) != null) {
                                                String errorR = Utils.getStringOfJSONObject(jsonObject, "error");
                                                String mensajeR = Utils.getStringOfJSONObject(jsonObject, "mensaje");
                                                if (errorR.equalsIgnoreCase("true")) {
                                                    Utils.setErrorPrincipal(mensajeR, "mensaje");
                                                    reload();
                                                } else {
                                                    //Window.alert(mensajeR);
                                                    Utils.setErrorPrincipal(mensajeR, "error");
                                                }
                                            }
                                        }

                                        public void onError(Request request, Throwable exception) {
                                            //Window.alert("Ocurrio un error al conectar con el servidor ");
                                            Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                                        }
                                    });
                                } catch (RequestException ex) {
                                    //Window.alert("Ocurrio un error al conectar con el servidor");
                                    Utils.setErrorPrincipal("Ocurrio un error al conectar con el servidor", "error");
                                }
                            }
                        }
                    });
                } else {
                    MessageBox.alert("No hay  selecionado  y/o selecciono mas de uno.");
                }
                eliminarMarcadetalle.setPressed(false);
            }
        });
        //**************************************************
        //***********NUEVA MARCA
        //**
        nuevoMarcadetalle.addListener(new ButtonListenerAdapter() {

            @Override
            public void onClick(Button button, EventObject e) {
                CargarNuevoMarcaDetalle();
            }
        });

        //**************************************************
        //***********EDITAR ROL
        //**************************************************
        editarMarcadetalle.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();
                        if (records.length == 1) {
                            String idmarca = records[0].getAsString("idmarca");
                            cargarDatosEditarMarcaDetalle(idmarca);
                        } else {

                            Utils.setErrorPrincipal("Por favor seleccione una Marca", "error");
                        }

                    }
                });


        anadirModelo.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        Record[] records = cbSelectionModel.getSelections();
                        if (records.length == 1) {
                            String idmarca = records[0].getAsString("idmarca");
                            AnadirModelo(idmarca);
                        } else {

                            Utils.setErrorPrincipal("Por favor seleccione una marca ", "error");
                        }

                    }
                });




        ControlPrecio.addListener(
                new ButtonListenerAdapter() {

                    @Override
                    public void onClick(Button button, EventObject e) {
                        ext_element = Ext.get("grid-lista-productos");

                        Record[] records = cbSelectionModel.getSelections();

                        if (records.length == 1) {
                            selecionado = records[0].getAsString("idmarca");
                            cargarControlPrecios(selecionado);

//
                        } else {

                            MessageBox.alert("Error seleccion mas de uno o ninguno.");

                        }
                        ControlPrecio.setPressed(false);
                   
                    }
                });
        //**************************************************
        //*********** LISTENERS DE LA TABLA
        //**************************************************
        grid.addListener(
                new PanelListenerAdapter() {

                    @Override
                    public void onRender(Component component) {
                        store.load(0, 100);
                    }
                });
        grid.addGridCellListener(
                new GridCellListenerAdapter() {

                    @Override
                    public void onCellClick(GridPanel grid, int rowIndex, int colIndex, EventObject e) {
                        if (grid.getColumnModel().getDataIndex(colIndex).equals("indoor")) {
                            Record record = grid.getStore().getAt(rowIndex);
                            record.set("indoor", !record.getAsBoolean("indoor"));
                        }

                    }
                });

    }

  

    private void verReporte(String enlace) {
        ReporteMediaCartaChorroWindow print = new ReporteMediaCartaChorroWindow(enlace);
        print.show();
    }

}
